public class RBTree {

    class Node {
        int data;
        Node left, right, parent;

        Node(int data) {
            this.data = data;
            left = right = parent = null;
        }
    }

    Node root;

    void leftRotate(Node x) {
        System.out.println("Left rotation at node " + x.data);
        // Simplified rotation logic (not full RBTree fix)
        Node y = x.right;
        if (y == null) return;
        x.right = y.left;
        if (y.left != null)
            y.left.parent = x;
        y.parent = x.parent;
        if (x.parent == null)
            root = y;
        else if (x == x.parent.left)
            x.parent.left = y;
        else
            x.parent.right = y;
        y.left = x;
        x.parent = y;
    }

    void rightRotate(Node x) {
        System.out.println("Right rotation at node " + x.data);
        // Simplified rotation logic (not full RBTree fix)
        Node y = x.left;
        if (y == null) return;
        x.left = y.right;
        if (y.right != null)
            y.right.parent = x;
        y.parent = x.parent;
        if (x.parent == null)
            root = y;
        else if (x == x.parent.right)
            x.parent.right = y;
        else
            x.parent.left = y;
        y.right = x;
        x.parent = y;
    }

    // Insert node like BST (no balancing)
    void insert(int data) {
        Node newNode = new Node(data);
        if (root == null) {
            root = newNode;
            return;
        }
        Node curr = root;
        Node parent = null;
        while (curr != null) {
            parent = curr;
            if (data < curr.data)
                curr = curr.left;
            else
                curr = curr.right;
        }
        newNode.parent = parent;
        if (data < parent.data)
            parent.left = newNode;
        else
            parent.right = newNode;

        // For demo: rotate at parent if imbalance (very simplified)
        if (parent.left == newNode) {
            rightRotate(parent);
        } else {
            leftRotate(parent);
        }
    }

    // Inorder print
    void inorder(Node node) {
        if (node == null) return;
        inorder(node.left);
        System.out.print(node.data + " ");
        inorder(node.right);
    }

    public static void main(String[] args) {
        SimpleRBTree tree = new SimpleRBTree();
        int[] values = {10,18,7,15,16,30,25,40,60,2,1,70};

        for (int v : values) {
            System.out.println("Inserting " + v);
            tree.insert(v);
        }

        System.out.println("Inorder traversal:");
        tree.inorder(tree.root);
    }
}
